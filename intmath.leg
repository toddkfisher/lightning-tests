%{
// LEG grammar for integer expressions.
// Create parse tree.  From parse tree generate code using GNU lighting.

#include <stdlib.h>
#include <stdio.h>
#include "intmath.h"

#define YYSTYPE PT_NODE *

%}

stmt = WS e:sum EOL
       {
         int max_reg = -1;
         assign_registers(e, 0, &max_reg);
         printf("Number of registers needed = %d\n", max_reg + 1);
         print_tree(e, 0);
         printf("\n");
         print_code(e);
         free_tree(e);
       }
     | (!EOL . )* EOL
       { printf("error\n"); }

expr = sum

sum = Left:product
      (Parent:ADD-OP Right:product
       {
         Parent->left = Left;
         Parent->right = Right;
         Left = Parent;
       }
      )*
      {
        $$ = Left;
      }

product = Left:factor
          (Parent:MULT-OP Right:factor
           {
             Parent->left = Left;
             Parent->right = Right;
             Left = Parent;
           }
          )*
          {
            $$ = Left;
          }

WS = [ \t]*

EOL = '\n' | '\r\n' | '\r' | ';'

ADD-OP = WS <('+' | '-')>  WS    # parens needed here
         {
           PT_NODE *node = new_node(yytext[0] == '+' ? T_ADD : T_SUB);
           $$ = node;
         }

MULT-OP = WS <('*' | '/')> WS    # parens needed here
          {
            PT_NODE *node = new_node(yytext[0] == '*' ? T_MUL : T_DIV);
            $$ = node;
          }

factor = LPAREN e:expr RPAREN
         {
           $$ = e;
         }
       | i:INT
         {
           $$ = i;
         }
INT = <(MINUS | PLUS)? [0-9]+>
      {
        PT_NODE *node = new_node(T_OPERAND);
        node->operand = atoi(yytext);
        $$ = node;
      }

PLUS = WS '+' WS

MINUS = WS '-' WS

LPAREN = WS '(' WS

RPAREN = WS ')' WS

%%

int main()
{
  while (yyparse()) {
    printf("--------------------\n");
    continue;
  }
  return 0;
}
